name: Build Arch Packages
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # For git-based PKGBUILDs like windowlist-git

    # -----------------------------------------------------------------
    # STEP: Build Unsigned Package using Docker
    # -----------------------------------------------------------------
    - name: Build Unsigned Package
      id: build
      run: |
        # Run the build in Docker
        docker run --rm \
          -v "${GITHUB_WORKSPACE}:/github/workspace" \
          -w /github/workspace \
          archlinux:latest /bin/bash -c "
          set -ex

          # --- 1. Setup Environment ---
          echo 'Setting up environment...'
          pacman-key --init
          pacman-key --populate archlinux

          # --- 2. Install Dependencies ---
          echo 'Installing dependencies...'
          pacman -Syu --needed --noconfirm base-devel git sudo python-hatchling python-hatch-vcs python-build python-installer python-wheel python
         glib2
         gtk4
         gtk4-layer-shell
         python-cairo
         python-gobject
         python-click
         python-loguru
         python-rich

          # --- 3. Configure sudoers for builder ---
          echo 'Configuring sudoers...'
          echo 'builder ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers

          # --- 4. Create and Setup Builder User ---
          echo 'Creating builder user...'
          useradd -m -s /bin/bash builder
          chown -R builder:builder /github/workspace

          # --- 5. Run makepkg as Builder User ---
          echo 'Running makepkg...'
          cd /github/workspace/packages/noctalia-shell
          sudo -u builder makepkg --noconfirm --skippgpcheck --clean --cleanbuild

          # --- 6. Log Success (no outputs here; handled on host) ---
          echo 'Build completed successfully inside container.'
          "

        # --- Host-Side: Check for Built Package and Set Outputs ---
        echo 'Checking for built package on host...'
        PACKAGE_FILE_ZST=$(find packages/ignis -maxdepth 1 -name '*.pkg.tar.zst' -print -quit)

        if [ -z "$PACKAGE_FILE_ZST" ]; then
          echo '::error::Package build failed or .zst file not found.'
          exit 1
        fi

        PACKAGE_FILENAME=$(basename "$PACKAGE_FILE_ZST")
        echo "Found package: $PACKAGE_FILENAME"
        echo "package=$PACKAGE_FILENAME" >> $GITHUB_OUTPUT
        echo "success=true" >> $GITHUB_OUTPUT

    # -----------------------------------------------------------------
    # STEP: Upload Artifact
    # -----------------------------------------------------------------
    - name: Upload Package Artifact
      if: steps.build.outputs.success == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: arch-package-${{ steps.build.outputs.package }}
        path: packages/ignis/*.pkg.tar.zst
        retention-days: 30

    # -----------------------------------------------------------------
    # STEP: Deploy to GitHub Pages (Optional, for main branch only)
    # -----------------------------------------------------------------
    - name: Deploy to GitHub Pages
      if: github.ref == 'refs/heads/main' && steps.build.outputs.success == 'true'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./packages/ignis
