name: Build Arch Packages

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

# -----------------------------------------------------------------
      # STEP 1: Import GPG key using the standard action
      # This replaces your old "Import GPG key" step
      # -----------------------------------------------------------------
    - name: Import GPG key
      id: import_gpg
      uses: crazy-max/ghaction-import-gpg@v6
      with:
        gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
        passphrase: ${{ secrets.GPG_PASSPHRASE }}
        # Trust the key automatically so makepkg can use it
        trust_level: 5 

      # -----------------------------------------------------------------
      # STEP 2: Build and Sign the package manually
      # This replaces the "heyhusen/archlinux-package-action" step
      # -----------------------------------------------------------------
    - name: Build and Sign package
      id: build
      uses: docker://archlinux:latest
      with:
        entrypoint: /bin/bash
        args: |
          set -ex
          
          # --- 1. Setup Environment ---
          # Install dependencies needed for building
          pacman-key --init
          pacman -Syu --noconfirm base-devel git
          
          # --- 2. Import GPG Key ---
          # Import the key from the env var provided by the previous step
          # Your log showed 'echo ""', which means this variable was empty.
          # Make sure the 'env:' block below is present!
          echo "${{ env.GPG_PRIVATE_KEY }}" | gpg --batch --import --passphrase "${{ env.GPG_PASSPHRASE }}"
          
          # --- 3. Run Build ---
          # Go to the correct directory
          cd /github/workspace/packages/windowlist
          
          # Create a non-root user 'builder' to run makepkg
          useradd builder -m
          chown -R builder:builder /github/workspace
          
          # Get the GPG Key ID
          # We run this as root, but 'builder' will use it
          KEY_ID=$(gpg --list-secret-keys --with-colons | grep 'sec:' | cut -d: -f5)
          echo "Using GPG Key ID: $KEY_ID"
          
          # Run makepkg as the 'builder' user
          # We pass the signing key ID via --sign --key
          sudo -u builder makepkg --noconfirm --skippgpcheck --sign --key "$KEY_ID"
          
          # --- 4. Set Outputs ---
          # Find the built package file
          PACKAGE_FILE_ZST=$(find . -maxdepth 1 -name "*.pkg.tar.zst" -print -quit)
          
          if [ -z "$PACKAGE_FILE_ZST" ]; then
            echo "::error::Package build failed or .zst file not found."
            exit 1
          fi
          
          # Output the *filename* for the next step
          PACKAGE_FILENAME=$(basename $PACKAGE_FILE_ZST)
          echo "Found package: $PACKAGE_FILENAME"
          echo "::set-output name=package::$PACKAGE_FILENAME"
          echo "::set-output name=success::true"
          
      env:
        # This 'env' block is CRITICAL for passing secrets into the container
        GPG_PRIVATE_KEY: ${{ steps.import_gpg.outputs.gpg_private_key }}
        GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        # This is needed to mount the workspace
        GITHUB_WORKSPACE: /github/workspace
        
    - name: Generate repo database
      run: |
        mkdir -p release/x86_64
        
        # Debug: List files in build dir (remove after testing)
        ls -la packages/windowlist/ || echo "Build dir emptyâ€”check previous step!"
        
        # Use action's output for exact filename (safer than glob)
        PACKAGE_FILE="${{ steps.build.outputs.package }}"
        if [ -n "$PACKAGE_FILE" ] && [ -f "packages/windowlist/$PACKAGE_FILE" ]; then
          cp "packages/windowlist/$PACKAGE_FILE" release/x86_64/
          echo "Copied $PACKAGE_FILE to release/"
        else
          echo "No package file found! Build likely failed. Exiting..."
          exit 1
        fi
        
        cd release
        repo-add --sign --verify my-repo.db.tar.gz x86_64/*.pkg.tar.zst
      if: steps.build.outputs.success == 'true'  # Only run if build succeeded
      
    - name: Deploy to GitHub Pages
      if: github.ref == 'refs/heads/main'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./release
